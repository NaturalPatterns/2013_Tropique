# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_cvblob', [dirname(__file__)])
        except ImportError:
            import _cvblob
            return _cvblob
        if fp is not None:
            try:
                _mod = imp.load_module('_cvblob', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _cvblob = swig_import_helper()
    del swig_import_helper
else:
    import _cvblob
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


CV_CHAINCODE_UP = _cvblob.CV_CHAINCODE_UP
CV_CHAINCODE_UP_RIGHT = _cvblob.CV_CHAINCODE_UP_RIGHT
CV_CHAINCODE_RIGHT = _cvblob.CV_CHAINCODE_RIGHT
CV_CHAINCODE_DOWN_RIGHT = _cvblob.CV_CHAINCODE_DOWN_RIGHT
CV_CHAINCODE_DOWN = _cvblob.CV_CHAINCODE_DOWN
CV_CHAINCODE_DOWN_LEFT = _cvblob.CV_CHAINCODE_DOWN_LEFT
CV_CHAINCODE_LEFT = _cvblob.CV_CHAINCODE_LEFT
CV_CHAINCODE_UP_LEFT = _cvblob.CV_CHAINCODE_UP_LEFT
class CvContourChainCode(_object):
    """Proxy of C++ cvb::CvContourChainCode class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CvContourChainCode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CvContourChainCode, name)
    __repr__ = _swig_repr
    __swig_setmethods__["startingPoint"] = _cvblob.CvContourChainCode_startingPoint_set
    __swig_getmethods__["startingPoint"] = _cvblob.CvContourChainCode_startingPoint_get
    if _newclass:startingPoint = _swig_property(_cvblob.CvContourChainCode_startingPoint_get, _cvblob.CvContourChainCode_startingPoint_set)
    __swig_setmethods__["chainCode"] = _cvblob.CvContourChainCode_chainCode_set
    __swig_getmethods__["chainCode"] = _cvblob.CvContourChainCode_chainCode_get
    if _newclass:chainCode = _swig_property(_cvblob.CvContourChainCode_chainCode_get, _cvblob.CvContourChainCode_chainCode_set)
    def __init__(self): 
        """__init__(self) -> CvContourChainCode"""
        this = _cvblob.new_CvContourChainCode()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cvblob.delete_CvContourChainCode
    __del__ = lambda self : None;
CvContourChainCode_swigregister = _cvblob.CvContourChainCode_swigregister
CvContourChainCode_swigregister(CvContourChainCode)
cvar = _cvblob.cvar
cvChainCodeMoves = cvar.cvChainCodeMoves


def cvConvertChainCodesToPolygon(*args):
  """cvConvertChainCodesToPolygon(CvContourChainCode cc) -> CvContourPolygon"""
  return _cvblob.cvConvertChainCodesToPolygon(*args)

def cvContourPolygonArea(*args):
  """cvContourPolygonArea(CvContourPolygon p) -> double"""
  return _cvblob.cvContourPolygonArea(*args)

def cvContourChainCodePerimeter(*args):
  """cvContourChainCodePerimeter(CvContourChainCode c) -> double"""
  return _cvblob.cvContourChainCodePerimeter(*args)

def cvContourPolygonPerimeter(*args):
  """cvContourPolygonPerimeter(CvContourPolygon p) -> double"""
  return _cvblob.cvContourPolygonPerimeter(*args)

def cvContourPolygonCircularity(*args):
  """cvContourPolygonCircularity(CvContourPolygon p) -> double"""
  return _cvblob.cvContourPolygonCircularity(*args)

def cvPolygonContourConvexHull(*args):
  """cvPolygonContourConvexHull(CvContourPolygon p) -> CvContourPolygon"""
  return _cvblob.cvPolygonContourConvexHull(*args)

def cvWriteContourPolygonCSV(*args):
  """cvWriteContourPolygonCSV(CvContourPolygon p, std::string filename)"""
  return _cvblob.cvWriteContourPolygonCSV(*args)
class CvBlob(_object):
    """Proxy of C++ cvb::CvBlob class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CvBlob, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CvBlob, name)
    __repr__ = _swig_repr
    __swig_setmethods__["label"] = _cvblob.CvBlob_label_set
    __swig_getmethods__["label"] = _cvblob.CvBlob_label_get
    if _newclass:label = _swig_property(_cvblob.CvBlob_label_get, _cvblob.CvBlob_label_set)
    __swig_setmethods__["area"] = _cvblob.CvBlob_area_set
    __swig_getmethods__["area"] = _cvblob.CvBlob_area_get
    if _newclass:area = _swig_property(_cvblob.CvBlob_area_get, _cvblob.CvBlob_area_set)
    __swig_setmethods__["minx"] = _cvblob.CvBlob_minx_set
    __swig_getmethods__["minx"] = _cvblob.CvBlob_minx_get
    if _newclass:minx = _swig_property(_cvblob.CvBlob_minx_get, _cvblob.CvBlob_minx_set)
    __swig_setmethods__["maxx"] = _cvblob.CvBlob_maxx_set
    __swig_getmethods__["maxx"] = _cvblob.CvBlob_maxx_get
    if _newclass:maxx = _swig_property(_cvblob.CvBlob_maxx_get, _cvblob.CvBlob_maxx_set)
    __swig_setmethods__["miny"] = _cvblob.CvBlob_miny_set
    __swig_getmethods__["miny"] = _cvblob.CvBlob_miny_get
    if _newclass:miny = _swig_property(_cvblob.CvBlob_miny_get, _cvblob.CvBlob_miny_set)
    __swig_setmethods__["maxy"] = _cvblob.CvBlob_maxy_set
    __swig_getmethods__["maxy"] = _cvblob.CvBlob_maxy_get
    if _newclass:maxy = _swig_property(_cvblob.CvBlob_maxy_get, _cvblob.CvBlob_maxy_set)
    __swig_setmethods__["centroid"] = _cvblob.CvBlob_centroid_set
    __swig_getmethods__["centroid"] = _cvblob.CvBlob_centroid_get
    if _newclass:centroid = _swig_property(_cvblob.CvBlob_centroid_get, _cvblob.CvBlob_centroid_set)
    __swig_setmethods__["m10"] = _cvblob.CvBlob_m10_set
    __swig_getmethods__["m10"] = _cvblob.CvBlob_m10_get
    if _newclass:m10 = _swig_property(_cvblob.CvBlob_m10_get, _cvblob.CvBlob_m10_set)
    __swig_setmethods__["m01"] = _cvblob.CvBlob_m01_set
    __swig_getmethods__["m01"] = _cvblob.CvBlob_m01_get
    if _newclass:m01 = _swig_property(_cvblob.CvBlob_m01_get, _cvblob.CvBlob_m01_set)
    __swig_setmethods__["m11"] = _cvblob.CvBlob_m11_set
    __swig_getmethods__["m11"] = _cvblob.CvBlob_m11_get
    if _newclass:m11 = _swig_property(_cvblob.CvBlob_m11_get, _cvblob.CvBlob_m11_set)
    __swig_setmethods__["m20"] = _cvblob.CvBlob_m20_set
    __swig_getmethods__["m20"] = _cvblob.CvBlob_m20_get
    if _newclass:m20 = _swig_property(_cvblob.CvBlob_m20_get, _cvblob.CvBlob_m20_set)
    __swig_setmethods__["m02"] = _cvblob.CvBlob_m02_set
    __swig_getmethods__["m02"] = _cvblob.CvBlob_m02_get
    if _newclass:m02 = _swig_property(_cvblob.CvBlob_m02_get, _cvblob.CvBlob_m02_set)
    __swig_setmethods__["u11"] = _cvblob.CvBlob_u11_set
    __swig_getmethods__["u11"] = _cvblob.CvBlob_u11_get
    if _newclass:u11 = _swig_property(_cvblob.CvBlob_u11_get, _cvblob.CvBlob_u11_set)
    __swig_setmethods__["u20"] = _cvblob.CvBlob_u20_set
    __swig_getmethods__["u20"] = _cvblob.CvBlob_u20_get
    if _newclass:u20 = _swig_property(_cvblob.CvBlob_u20_get, _cvblob.CvBlob_u20_set)
    __swig_setmethods__["u02"] = _cvblob.CvBlob_u02_set
    __swig_getmethods__["u02"] = _cvblob.CvBlob_u02_get
    if _newclass:u02 = _swig_property(_cvblob.CvBlob_u02_get, _cvblob.CvBlob_u02_set)
    __swig_setmethods__["n11"] = _cvblob.CvBlob_n11_set
    __swig_getmethods__["n11"] = _cvblob.CvBlob_n11_get
    if _newclass:n11 = _swig_property(_cvblob.CvBlob_n11_get, _cvblob.CvBlob_n11_set)
    __swig_setmethods__["n20"] = _cvblob.CvBlob_n20_set
    __swig_getmethods__["n20"] = _cvblob.CvBlob_n20_get
    if _newclass:n20 = _swig_property(_cvblob.CvBlob_n20_get, _cvblob.CvBlob_n20_set)
    __swig_setmethods__["n02"] = _cvblob.CvBlob_n02_set
    __swig_getmethods__["n02"] = _cvblob.CvBlob_n02_get
    if _newclass:n02 = _swig_property(_cvblob.CvBlob_n02_get, _cvblob.CvBlob_n02_set)
    __swig_setmethods__["p1"] = _cvblob.CvBlob_p1_set
    __swig_getmethods__["p1"] = _cvblob.CvBlob_p1_get
    if _newclass:p1 = _swig_property(_cvblob.CvBlob_p1_get, _cvblob.CvBlob_p1_set)
    __swig_setmethods__["p2"] = _cvblob.CvBlob_p2_set
    __swig_getmethods__["p2"] = _cvblob.CvBlob_p2_get
    if _newclass:p2 = _swig_property(_cvblob.CvBlob_p2_get, _cvblob.CvBlob_p2_set)
    __swig_setmethods__["contour"] = _cvblob.CvBlob_contour_set
    __swig_getmethods__["contour"] = _cvblob.CvBlob_contour_get
    if _newclass:contour = _swig_property(_cvblob.CvBlob_contour_get, _cvblob.CvBlob_contour_set)
    __swig_setmethods__["internalContours"] = _cvblob.CvBlob_internalContours_set
    __swig_getmethods__["internalContours"] = _cvblob.CvBlob_internalContours_get
    if _newclass:internalContours = _swig_property(_cvblob.CvBlob_internalContours_get, _cvblob.CvBlob_internalContours_set)
    def __init__(self): 
        """__init__(self) -> CvBlob"""
        this = _cvblob.new_CvBlob()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cvblob.delete_CvBlob
    __del__ = lambda self : None;
CvBlob_swigregister = _cvblob.CvBlob_swigregister
CvBlob_swigregister(CvBlob)

def cvRenderContourChainCode(*args):
  """
    cvRenderContourChainCode(CvContourChainCode contour, IplImage img, CvScalar color = CV_RGB(255, 255, 255))
    cvRenderContourChainCode(CvContourChainCode contour, IplImage img)
    """
  return _cvblob.cvRenderContourChainCode(*args)

def cvRenderContourPolygon(*args):
  """
    cvRenderContourPolygon(CvContourPolygon contour, IplImage img, CvScalar color = CV_RGB(255, 255, 255))
    cvRenderContourPolygon(CvContourPolygon contour, IplImage img)
    """
  return _cvblob.cvRenderContourPolygon(*args)

def cvSimplifyPolygon(*args):
  """
    cvSimplifyPolygon(CvContourPolygon p, double delta = 1.) -> CvContourPolygon
    cvSimplifyPolygon(CvContourPolygon p) -> CvContourPolygon
    """
  return _cvblob.cvSimplifyPolygon(*args)

def cvWriteContourPolygonSVG(*args):
  """
    cvWriteContourPolygonSVG(CvContourPolygon p, std::string filename, CvScalar stroke = cvScalar(0,0,0), 
        CvScalar fill = cvScalar(255,255,255))
    cvWriteContourPolygonSVG(CvContourPolygon p, std::string filename, CvScalar stroke = cvScalar(0,0,0))
    cvWriteContourPolygonSVG(CvContourPolygon p, std::string filename)
    """
  return _cvblob.cvWriteContourPolygonSVG(*args)


def cvLabel(*args):
  """cvLabel(IplImage img, IplImage imgOut, CvBlobs blobs) -> unsigned int"""
  return _cvblob.cvLabel(*args)

def cvFilterLabels(*args):
  """cvFilterLabels(IplImage imgIn, IplImage imgOut, CvBlobs blobs)"""
  return _cvblob.cvFilterLabels(*args)

def cvGetLabel(*args):
  """cvGetLabel(IplImage img, unsigned int x, unsigned int y) -> CvLabel"""
  return _cvblob.cvGetLabel(*args)

def cvReleaseBlob(*args):
  """cvReleaseBlob(CvBlob blob)"""
  return _cvblob.cvReleaseBlob(*args)

def cvReleaseBlobs(*args):
  """cvReleaseBlobs(CvBlobs blobs)"""
  return _cvblob.cvReleaseBlobs(*args)

def cvGreaterBlob(*args):
  """cvGreaterBlob(CvBlobs blobs) -> CvLabel"""
  return _cvblob.cvGreaterBlob(*args)

def cvFilterByArea(*args):
  """cvFilterByArea(CvBlobs blobs, unsigned int minArea, unsigned int maxArea)"""
  return _cvblob.cvFilterByArea(*args)

def cvFilterByLabel(*args):
  """cvFilterByLabel(CvBlobs blobs, CvLabel label)"""
  return _cvblob.cvFilterByLabel(*args)

def cvCentroid(*args):
  """cvCentroid(CvBlob blob) -> CvPoint2D64f"""
  return _cvblob.cvCentroid(*args)

def cvAngle(*args):
  """cvAngle(CvBlob blob) -> double"""
  return _cvblob.cvAngle(*args)

def cvSaveImageBlob(*args):
  """cvSaveImageBlob(char filename, IplImage img, CvBlob blob)"""
  return _cvblob.cvSaveImageBlob(*args)
CV_BLOB_RENDER_COLOR = _cvblob.CV_BLOB_RENDER_COLOR
CV_BLOB_RENDER_CENTROID = _cvblob.CV_BLOB_RENDER_CENTROID
CV_BLOB_RENDER_BOUNDING_BOX = _cvblob.CV_BLOB_RENDER_BOUNDING_BOX
CV_BLOB_RENDER_ANGLE = _cvblob.CV_BLOB_RENDER_ANGLE
CV_BLOB_RENDER_TO_LOG = _cvblob.CV_BLOB_RENDER_TO_LOG
CV_BLOB_RENDER_TO_STD = _cvblob.CV_BLOB_RENDER_TO_STD

def cvSetImageROItoBlob(*args):
  """cvSetImageROItoBlob(IplImage img, CvBlob blob)"""
  return _cvblob.cvSetImageROItoBlob(*args)

def cvBlobMeanColor(*args):
  """cvBlobMeanColor(CvBlob blob, IplImage imgLabel, IplImage img) -> CvScalar"""
  return _cvblob.cvBlobMeanColor(*args)

def cvDotProductPoints(*args):
  """cvDotProductPoints(CvPoint a, CvPoint b, CvPoint c) -> double"""
  return _cvblob.cvDotProductPoints(*args)

def cvCrossProductPoints(*args):
  """cvCrossProductPoints(CvPoint a, CvPoint b, CvPoint c) -> double"""
  return _cvblob.cvCrossProductPoints(*args)

def cvDistancePointPoint(*args):
  """cvDistancePointPoint(CvPoint a, CvPoint b) -> double"""
  return _cvblob.cvDistancePointPoint(*args)
class CvTrack(_object):
    """Proxy of C++ cvb::CvTrack class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CvTrack, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CvTrack, name)
    __repr__ = _swig_repr
    __swig_setmethods__["id"] = _cvblob.CvTrack_id_set
    __swig_getmethods__["id"] = _cvblob.CvTrack_id_get
    if _newclass:id = _swig_property(_cvblob.CvTrack_id_get, _cvblob.CvTrack_id_set)
    __swig_setmethods__["label"] = _cvblob.CvTrack_label_set
    __swig_getmethods__["label"] = _cvblob.CvTrack_label_get
    if _newclass:label = _swig_property(_cvblob.CvTrack_label_get, _cvblob.CvTrack_label_set)
    __swig_setmethods__["minx"] = _cvblob.CvTrack_minx_set
    __swig_getmethods__["minx"] = _cvblob.CvTrack_minx_get
    if _newclass:minx = _swig_property(_cvblob.CvTrack_minx_get, _cvblob.CvTrack_minx_set)
    __swig_setmethods__["maxx"] = _cvblob.CvTrack_maxx_set
    __swig_getmethods__["maxx"] = _cvblob.CvTrack_maxx_get
    if _newclass:maxx = _swig_property(_cvblob.CvTrack_maxx_get, _cvblob.CvTrack_maxx_set)
    __swig_setmethods__["miny"] = _cvblob.CvTrack_miny_set
    __swig_getmethods__["miny"] = _cvblob.CvTrack_miny_get
    if _newclass:miny = _swig_property(_cvblob.CvTrack_miny_get, _cvblob.CvTrack_miny_set)
    __swig_setmethods__["maxy"] = _cvblob.CvTrack_maxy_set
    __swig_getmethods__["maxy"] = _cvblob.CvTrack_maxy_get
    if _newclass:maxy = _swig_property(_cvblob.CvTrack_maxy_get, _cvblob.CvTrack_maxy_set)
    __swig_setmethods__["centroid"] = _cvblob.CvTrack_centroid_set
    __swig_getmethods__["centroid"] = _cvblob.CvTrack_centroid_get
    if _newclass:centroid = _swig_property(_cvblob.CvTrack_centroid_get, _cvblob.CvTrack_centroid_set)
    __swig_setmethods__["lifetime"] = _cvblob.CvTrack_lifetime_set
    __swig_getmethods__["lifetime"] = _cvblob.CvTrack_lifetime_get
    if _newclass:lifetime = _swig_property(_cvblob.CvTrack_lifetime_get, _cvblob.CvTrack_lifetime_set)
    __swig_setmethods__["active"] = _cvblob.CvTrack_active_set
    __swig_getmethods__["active"] = _cvblob.CvTrack_active_get
    if _newclass:active = _swig_property(_cvblob.CvTrack_active_get, _cvblob.CvTrack_active_set)
    __swig_setmethods__["inactive"] = _cvblob.CvTrack_inactive_set
    __swig_getmethods__["inactive"] = _cvblob.CvTrack_inactive_get
    if _newclass:inactive = _swig_property(_cvblob.CvTrack_inactive_get, _cvblob.CvTrack_inactive_set)
    def __init__(self): 
        """__init__(self) -> CvTrack"""
        this = _cvblob.new_CvTrack()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cvblob.delete_CvTrack
    __del__ = lambda self : None;
CvTrack_swigregister = _cvblob.CvTrack_swigregister
CvTrack_swigregister(CvTrack)

def cvRenderBlob(*args):
  """
    cvRenderBlob(IplImage imgLabel, CvBlob blob, IplImage imgSource, 
        IplImage imgDest, unsigned short mode = 0x000f, 
        CvScalar color = CV_RGB(255, 255, 255), double alpha = 1.)
    cvRenderBlob(IplImage imgLabel, CvBlob blob, IplImage imgSource, 
        IplImage imgDest, unsigned short mode = 0x000f, 
        CvScalar color = CV_RGB(255, 255, 255))
    cvRenderBlob(IplImage imgLabel, CvBlob blob, IplImage imgSource, 
        IplImage imgDest, unsigned short mode = 0x000f)
    cvRenderBlob(IplImage imgLabel, CvBlob blob, IplImage imgSource, 
        IplImage imgDest)
    """
  return _cvblob.cvRenderBlob(*args)

def cvRenderBlobs(*args):
  """
    cvRenderBlobs(IplImage imgLabel, CvBlobs blobs, IplImage imgSource, 
        IplImage imgDest, unsigned short mode = 0x000f, 
        double alpha = 1.)
    cvRenderBlobs(IplImage imgLabel, CvBlobs blobs, IplImage imgSource, 
        IplImage imgDest, unsigned short mode = 0x000f)
    cvRenderBlobs(IplImage imgLabel, CvBlobs blobs, IplImage imgSource, 
        IplImage imgDest)
    """
  return _cvblob.cvRenderBlobs(*args)

def cvDistanceLinePoint(*args):
  """
    cvDistanceLinePoint(CvPoint a, CvPoint b, CvPoint c, bool isSegment = True) -> double
    cvDistanceLinePoint(CvPoint a, CvPoint b, CvPoint c) -> double
    """
  return _cvblob.cvDistanceLinePoint(*args)


def cvReleaseTracks(*args):
  """cvReleaseTracks(CvTracks tracks)"""
  return _cvblob.cvReleaseTracks(*args)
CV_TRACK_RENDER_ID = _cvblob.CV_TRACK_RENDER_ID
CV_TRACK_RENDER_BOUNDING_BOX = _cvblob.CV_TRACK_RENDER_BOUNDING_BOX
CV_TRACK_RENDER_TO_LOG = _cvblob.CV_TRACK_RENDER_TO_LOG
CV_TRACK_RENDER_TO_STD = _cvblob.CV_TRACK_RENDER_TO_STD
class SwigPyIterator(_object):
    """Proxy of C++ swig::SwigPyIterator class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _cvblob.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self):
        """value(self) -> PyObject"""
        return _cvblob.SwigPyIterator_value(self)

    def incr(self, n = 1):
        """
        incr(self, size_t n = 1) -> SwigPyIterator
        incr(self) -> SwigPyIterator
        """
        return _cvblob.SwigPyIterator_incr(self, n)

    def decr(self, n = 1):
        """
        decr(self, size_t n = 1) -> SwigPyIterator
        decr(self) -> SwigPyIterator
        """
        return _cvblob.SwigPyIterator_decr(self, n)

    def distance(self, *args):
        """distance(self, SwigPyIterator x) -> ptrdiff_t"""
        return _cvblob.SwigPyIterator_distance(self, *args)

    def equal(self, *args):
        """equal(self, SwigPyIterator x) -> bool"""
        return _cvblob.SwigPyIterator_equal(self, *args)

    def copy(self):
        """copy(self) -> SwigPyIterator"""
        return _cvblob.SwigPyIterator_copy(self)

    def next(self):
        """next(self) -> PyObject"""
        return _cvblob.SwigPyIterator_next(self)

    def __next__(self):
        """__next__(self) -> PyObject"""
        return _cvblob.SwigPyIterator___next__(self)

    def previous(self):
        """previous(self) -> PyObject"""
        return _cvblob.SwigPyIterator_previous(self)

    def advance(self, *args):
        """advance(self, ptrdiff_t n) -> SwigPyIterator"""
        return _cvblob.SwigPyIterator_advance(self, *args)

    def __eq__(self, *args):
        """__eq__(self, SwigPyIterator x) -> bool"""
        return _cvblob.SwigPyIterator___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(self, SwigPyIterator x) -> bool"""
        return _cvblob.SwigPyIterator___ne__(self, *args)

    def __iadd__(self, *args):
        """__iadd__(self, ptrdiff_t n) -> SwigPyIterator"""
        return _cvblob.SwigPyIterator___iadd__(self, *args)

    def __isub__(self, *args):
        """__isub__(self, ptrdiff_t n) -> SwigPyIterator"""
        return _cvblob.SwigPyIterator___isub__(self, *args)

    def __add__(self, *args):
        """__add__(self, ptrdiff_t n) -> SwigPyIterator"""
        return _cvblob.SwigPyIterator___add__(self, *args)

    def __sub__(self, *args):
        """
        __sub__(self, ptrdiff_t n) -> SwigPyIterator
        __sub__(self, SwigPyIterator x) -> ptrdiff_t
        """
        return _cvblob.SwigPyIterator___sub__(self, *args)

    def __iter__(self): return self
SwigPyIterator_swigregister = _cvblob.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

def cvUpdateTracks(*args):
  """
    cvUpdateTracks(CvBlobs b, CvTracks t, double thDistance, unsigned int thInactive, 
        unsigned int thActive = 0)
    cvUpdateTracks(CvBlobs b, CvTracks t, double thDistance, unsigned int thInactive)
    """
  return _cvblob.cvUpdateTracks(*args)

def cvRenderTracks(*args):
  """
    cvRenderTracks(CvTracks tracks, IplImage imgSource, IplImage imgDest, 
        unsigned short mode = 0x000f, CvFont font = None)
    cvRenderTracks(CvTracks tracks, IplImage imgSource, IplImage imgDest, 
        unsigned short mode = 0x000f)
    cvRenderTracks(CvTracks tracks, IplImage imgSource, IplImage imgDest)
    """
  return _cvblob.cvRenderTracks(*args)

class CvBlobs(_object):
    """Proxy of C++ std::map<(cvb::CvLabel,p.cvb::CvBlob)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CvBlobs, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CvBlobs, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _cvblob.CvBlobs_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _cvblob.CvBlobs___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _cvblob.CvBlobs___bool__(self)

    def __len__(self):
        """__len__(self) -> std::map<(unsigned int,p.cvb::CvBlob)>::size_type"""
        return _cvblob.CvBlobs___len__(self)

    def __getitem__(self, *args):
        """__getitem__(self, std::map<(unsigned int,p.cvb::CvBlob)>::key_type key) -> std::map<(unsigned int,p.cvb::CvBlob)>::mapped_type"""
        return _cvblob.CvBlobs___getitem__(self, *args)

    def __delitem__(self, *args):
        """__delitem__(self, std::map<(unsigned int,p.cvb::CvBlob)>::key_type key)"""
        return _cvblob.CvBlobs___delitem__(self, *args)

    def has_key(self, *args):
        """has_key(self, std::map<(unsigned int,p.cvb::CvBlob)>::key_type key) -> bool"""
        return _cvblob.CvBlobs_has_key(self, *args)

    def keys(self):
        """keys(self) -> PyObject"""
        return _cvblob.CvBlobs_keys(self)

    def values(self):
        """values(self) -> PyObject"""
        return _cvblob.CvBlobs_values(self)

    def items(self):
        """items(self) -> PyObject"""
        return _cvblob.CvBlobs_items(self)

    def __contains__(self, *args):
        """__contains__(self, std::map<(unsigned int,p.cvb::CvBlob)>::key_type key) -> bool"""
        return _cvblob.CvBlobs___contains__(self, *args)

    def key_iterator(self):
        """key_iterator(self) -> SwigPyIterator"""
        return _cvblob.CvBlobs_key_iterator(self)

    def value_iterator(self):
        """value_iterator(self) -> SwigPyIterator"""
        return _cvblob.CvBlobs_value_iterator(self)

    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __setitem__(self, *args):
        """
        __setitem__(self, std::map<(unsigned int,p.cvb::CvBlob)>::key_type key, 
            std::map<(unsigned int,p.cvb::CvBlob)>::mapped_type x)
        """
        return _cvblob.CvBlobs___setitem__(self, *args)

    def __init__(self, *args): 
        """
        __init__(self, std::less<(unsigned int)> arg0) -> CvBlobs
        __init__(self) -> CvBlobs
        __init__(self, CvBlobs arg0) -> CvBlobs
        """
        this = _cvblob.new_CvBlobs(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self):
        """empty(self) -> bool"""
        return _cvblob.CvBlobs_empty(self)

    def size(self):
        """size(self) -> std::map<(unsigned int,p.cvb::CvBlob)>::size_type"""
        return _cvblob.CvBlobs_size(self)

    def clear(self):
        """clear(self)"""
        return _cvblob.CvBlobs_clear(self)

    def swap(self, *args):
        """swap(self, CvBlobs v)"""
        return _cvblob.CvBlobs_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> std::map<(unsigned int,p.cvb::CvBlob)>::allocator_type"""
        return _cvblob.CvBlobs_get_allocator(self)

    def begin(self):
        """begin(self) -> std::map<(unsigned int,p.cvb::CvBlob)>::const_iterator"""
        return _cvblob.CvBlobs_begin(self)

    def end(self):
        """end(self) -> std::map<(unsigned int,p.cvb::CvBlob)>::const_iterator"""
        return _cvblob.CvBlobs_end(self)

    def rbegin(self):
        """rbegin(self) -> std::map<(unsigned int,p.cvb::CvBlob)>::const_reverse_iterator"""
        return _cvblob.CvBlobs_rbegin(self)

    def rend(self):
        """rend(self) -> std::map<(unsigned int,p.cvb::CvBlob)>::const_reverse_iterator"""
        return _cvblob.CvBlobs_rend(self)

    def count(self, *args):
        """count(self, std::map<(unsigned int,p.cvb::CvBlob)>::key_type x) -> std::map<(unsigned int,p.cvb::CvBlob)>::size_type"""
        return _cvblob.CvBlobs_count(self, *args)

    def erase(self, *args):
        """
        erase(self, std::map<(unsigned int,p.cvb::CvBlob)>::key_type x) -> std::map<(unsigned int,p.cvb::CvBlob)>::size_type
        erase(self, std::map<(unsigned int,p.cvb::CvBlob)>::iterator position)
        erase(self, std::map<(unsigned int,p.cvb::CvBlob)>::iterator first, 
            std::map<(unsigned int,p.cvb::CvBlob)>::iterator last)
        """
        return _cvblob.CvBlobs_erase(self, *args)

    def find(self, *args):
        """find(self, std::map<(unsigned int,p.cvb::CvBlob)>::key_type x) -> std::map<(unsigned int,p.cvb::CvBlob)>::iterator"""
        return _cvblob.CvBlobs_find(self, *args)

    def lower_bound(self, *args):
        """lower_bound(self, std::map<(unsigned int,p.cvb::CvBlob)>::key_type x) -> std::map<(unsigned int,p.cvb::CvBlob)>::iterator"""
        return _cvblob.CvBlobs_lower_bound(self, *args)

    def upper_bound(self, *args):
        """upper_bound(self, std::map<(unsigned int,p.cvb::CvBlob)>::key_type x) -> std::map<(unsigned int,p.cvb::CvBlob)>::iterator"""
        return _cvblob.CvBlobs_upper_bound(self, *args)

    __swig_destroy__ = _cvblob.delete_CvBlobs
    __del__ = lambda self : None;
CvBlobs_swigregister = _cvblob.CvBlobs_swigregister
CvBlobs_swigregister(CvBlobs)

class CvContourPolygon(_object):
    """Proxy of C++ std::vector<(CvPoint)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CvContourPolygon, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CvContourPolygon, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _cvblob.CvContourPolygon_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _cvblob.CvContourPolygon___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _cvblob.CvContourPolygon___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _cvblob.CvContourPolygon___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _cvblob.CvContourPolygon_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, difference_type i, difference_type j) -> std::vector<(CvPoint,std::allocator<(CvPoint)>)>"""
        return _cvblob.CvContourPolygon___getslice__(self, *args)

    def __setslice__(self, *args):
        """__setslice__(self, difference_type i, difference_type j, std::vector<(CvPoint,std::allocator<(CvPoint)>)> v)"""
        return _cvblob.CvContourPolygon___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _cvblob.CvContourPolygon___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _cvblob.CvContourPolygon___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> std::vector<(CvPoint,std::allocator<(CvPoint)>)>
        __getitem__(self, difference_type i) -> value_type
        """
        return _cvblob.CvContourPolygon___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, std::vector<(CvPoint,std::allocator<(CvPoint)>)> v)
        __setitem__(self, difference_type i, value_type x)
        """
        return _cvblob.CvContourPolygon___setitem__(self, *args)

    def append(self, *args):
        """append(self, value_type x)"""
        return _cvblob.CvContourPolygon_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _cvblob.CvContourPolygon_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _cvblob.CvContourPolygon_size(self)

    def clear(self):
        """clear(self)"""
        return _cvblob.CvContourPolygon_clear(self)

    def swap(self, *args):
        """swap(self, CvContourPolygon v)"""
        return _cvblob.CvContourPolygon_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _cvblob.CvContourPolygon_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _cvblob.CvContourPolygon_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _cvblob.CvContourPolygon_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _cvblob.CvContourPolygon_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _cvblob.CvContourPolygon_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _cvblob.CvContourPolygon_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _cvblob.CvContourPolygon_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> CvContourPolygon
        __init__(self, CvContourPolygon arg0) -> CvContourPolygon
        __init__(self, size_type size) -> CvContourPolygon
        __init__(self, size_type size, value_type value) -> CvContourPolygon
        """
        this = _cvblob.new_CvContourPolygon(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(self, value_type x)"""
        return _cvblob.CvContourPolygon_push_back(self, *args)

    def front(self):
        """front(self) -> value_type"""
        return _cvblob.CvContourPolygon_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _cvblob.CvContourPolygon_back(self)

    def assign(self, *args):
        """assign(self, size_type n, value_type x)"""
        return _cvblob.CvContourPolygon_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _cvblob.CvContourPolygon_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _cvblob.CvContourPolygon_insert(self, *args)

    def reserve(self, *args):
        """reserve(self, size_type n)"""
        return _cvblob.CvContourPolygon_reserve(self, *args)

    def capacity(self):
        """capacity(self) -> size_type"""
        return _cvblob.CvContourPolygon_capacity(self)

    __swig_destroy__ = _cvblob.delete_CvContourPolygon
    __del__ = lambda self : None;
CvContourPolygon_swigregister = _cvblob.CvContourPolygon_swigregister
CvContourPolygon_swigregister(CvContourPolygon)

class CvContoursChainCode(_object):
    """Proxy of C++ std::list<(p.cvb::CvContourChainCode)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CvContoursChainCode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CvContoursChainCode, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _cvblob.CvContoursChainCode_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _cvblob.CvContoursChainCode___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _cvblob.CvContoursChainCode___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _cvblob.CvContoursChainCode___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _cvblob.CvContoursChainCode_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, difference_type i, difference_type j) -> CvContoursChainCode"""
        return _cvblob.CvContoursChainCode___getslice__(self, *args)

    def __setslice__(self, *args):
        """__setslice__(self, difference_type i, difference_type j, CvContoursChainCode v)"""
        return _cvblob.CvContoursChainCode___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _cvblob.CvContoursChainCode___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _cvblob.CvContoursChainCode___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> CvContoursChainCode
        __getitem__(self, difference_type i) -> value_type
        """
        return _cvblob.CvContoursChainCode___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, CvContoursChainCode v)
        __setitem__(self, difference_type i, value_type x)
        """
        return _cvblob.CvContoursChainCode___setitem__(self, *args)

    def append(self, *args):
        """append(self, value_type x)"""
        return _cvblob.CvContoursChainCode_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _cvblob.CvContoursChainCode_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _cvblob.CvContoursChainCode_size(self)

    def clear(self):
        """clear(self)"""
        return _cvblob.CvContoursChainCode_clear(self)

    def swap(self, *args):
        """swap(self, CvContoursChainCode v)"""
        return _cvblob.CvContoursChainCode_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _cvblob.CvContoursChainCode_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _cvblob.CvContoursChainCode_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _cvblob.CvContoursChainCode_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _cvblob.CvContoursChainCode_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _cvblob.CvContoursChainCode_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _cvblob.CvContoursChainCode_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _cvblob.CvContoursChainCode_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> CvContoursChainCode
        __init__(self, CvContoursChainCode arg0) -> CvContoursChainCode
        __init__(self, size_type size) -> CvContoursChainCode
        __init__(self, size_type size, value_type value) -> CvContoursChainCode
        """
        this = _cvblob.new_CvContoursChainCode(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(self, value_type x)"""
        return _cvblob.CvContoursChainCode_push_back(self, *args)

    def front(self):
        """front(self) -> value_type"""
        return _cvblob.CvContoursChainCode_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _cvblob.CvContoursChainCode_back(self)

    def assign(self, *args):
        """assign(self, size_type n, value_type x)"""
        return _cvblob.CvContoursChainCode_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _cvblob.CvContoursChainCode_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _cvblob.CvContoursChainCode_insert(self, *args)

    def pop_front(self):
        """pop_front(self)"""
        return _cvblob.CvContoursChainCode_pop_front(self)

    def push_front(self, *args):
        """push_front(self, value_type x)"""
        return _cvblob.CvContoursChainCode_push_front(self, *args)

    def remove(self, *args):
        """remove(self, value_type x)"""
        return _cvblob.CvContoursChainCode_remove(self, *args)

    def unique(self):
        """unique(self)"""
        return _cvblob.CvContoursChainCode_unique(self)

    def reverse(self):
        """reverse(self)"""
        return _cvblob.CvContoursChainCode_reverse(self)

    def sort(self):
        """sort(self)"""
        return _cvblob.CvContoursChainCode_sort(self)

    def merge(self, *args):
        """merge(self, CvContoursChainCode x)"""
        return _cvblob.CvContoursChainCode_merge(self, *args)

    __swig_destroy__ = _cvblob.delete_CvContoursChainCode
    __del__ = lambda self : None;
CvContoursChainCode_swigregister = _cvblob.CvContoursChainCode_swigregister
CvContoursChainCode_swigregister(CvContoursChainCode)

class CvChainCodes(_object):
    """Proxy of C++ std::list<(cvb::CvChainCode)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CvChainCodes, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CvChainCodes, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _cvblob.CvChainCodes_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _cvblob.CvChainCodes___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _cvblob.CvChainCodes___bool__(self)

    def __len__(self):
        """__len__(self) -> std::list<(unsigned char)>::size_type"""
        return _cvblob.CvChainCodes___len__(self)

    def pop(self):
        """pop(self) -> std::list<(unsigned char)>::value_type"""
        return _cvblob.CvChainCodes_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, std::list<(unsigned char)>::difference_type i, std::list<(unsigned char)>::difference_type j) -> CvChainCodes"""
        return _cvblob.CvChainCodes___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(self, std::list<(unsigned char)>::difference_type i, std::list<(unsigned char)>::difference_type j, 
            CvChainCodes v)
        """
        return _cvblob.CvChainCodes___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, std::list<(unsigned char)>::difference_type i, std::list<(unsigned char)>::difference_type j)"""
        return _cvblob.CvChainCodes___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, std::list<(unsigned char)>::difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _cvblob.CvChainCodes___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> CvChainCodes
        __getitem__(self, std::list<(unsigned char)>::difference_type i) -> std::list<(unsigned char)>::value_type
        """
        return _cvblob.CvChainCodes___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, CvChainCodes v)
        __setitem__(self, std::list<(unsigned char)>::difference_type i, std::list<(unsigned char)>::value_type x)
        """
        return _cvblob.CvChainCodes___setitem__(self, *args)

    def append(self, *args):
        """append(self, std::list<(unsigned char)>::value_type x)"""
        return _cvblob.CvChainCodes_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _cvblob.CvChainCodes_empty(self)

    def size(self):
        """size(self) -> std::list<(unsigned char)>::size_type"""
        return _cvblob.CvChainCodes_size(self)

    def clear(self):
        """clear(self)"""
        return _cvblob.CvChainCodes_clear(self)

    def swap(self, *args):
        """swap(self, CvChainCodes v)"""
        return _cvblob.CvChainCodes_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> std::list<(unsigned char)>::allocator_type"""
        return _cvblob.CvChainCodes_get_allocator(self)

    def begin(self):
        """begin(self) -> std::list<(unsigned char)>::const_iterator"""
        return _cvblob.CvChainCodes_begin(self)

    def end(self):
        """end(self) -> std::list<(unsigned char)>::const_iterator"""
        return _cvblob.CvChainCodes_end(self)

    def rbegin(self):
        """rbegin(self) -> std::list<(unsigned char)>::const_reverse_iterator"""
        return _cvblob.CvChainCodes_rbegin(self)

    def rend(self):
        """rend(self) -> std::list<(unsigned char)>::const_reverse_iterator"""
        return _cvblob.CvChainCodes_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _cvblob.CvChainCodes_pop_back(self)

    def erase(self, *args):
        """
        erase(self, std::list<(unsigned char)>::iterator pos) -> std::list<(unsigned char)>::iterator
        erase(self, std::list<(unsigned char)>::iterator first, std::list<(unsigned char)>::iterator last) -> std::list<(unsigned char)>::iterator
        """
        return _cvblob.CvChainCodes_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> CvChainCodes
        __init__(self, CvChainCodes arg0) -> CvChainCodes
        __init__(self, std::list<(unsigned char)>::size_type size) -> CvChainCodes
        __init__(self, std::list<(unsigned char)>::size_type size, std::list<(unsigned char)>::value_type value) -> CvChainCodes
        """
        this = _cvblob.new_CvChainCodes(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(self, std::list<(unsigned char)>::value_type x)"""
        return _cvblob.CvChainCodes_push_back(self, *args)

    def front(self):
        """front(self) -> std::list<(unsigned char)>::value_type"""
        return _cvblob.CvChainCodes_front(self)

    def back(self):
        """back(self) -> std::list<(unsigned char)>::value_type"""
        return _cvblob.CvChainCodes_back(self)

    def assign(self, *args):
        """assign(self, std::list<(unsigned char)>::size_type n, std::list<(unsigned char)>::value_type x)"""
        return _cvblob.CvChainCodes_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, std::list<(unsigned char)>::size_type new_size)
        resize(self, std::list<(unsigned char)>::size_type new_size, std::list<(unsigned char)>::value_type x)
        """
        return _cvblob.CvChainCodes_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, std::list<(unsigned char)>::iterator pos, std::list<(unsigned char)>::value_type x) -> std::list<(unsigned char)>::iterator
        insert(self, std::list<(unsigned char)>::iterator pos, std::list<(unsigned char)>::size_type n, 
            std::list<(unsigned char)>::value_type x)
        """
        return _cvblob.CvChainCodes_insert(self, *args)

    def pop_front(self):
        """pop_front(self)"""
        return _cvblob.CvChainCodes_pop_front(self)

    def push_front(self, *args):
        """push_front(self, std::list<(unsigned char)>::value_type x)"""
        return _cvblob.CvChainCodes_push_front(self, *args)

    def reverse(self):
        """reverse(self)"""
        return _cvblob.CvChainCodes_reverse(self)

    __swig_destroy__ = _cvblob.delete_CvChainCodes
    __del__ = lambda self : None;
CvChainCodes_swigregister = _cvblob.CvChainCodes_swigregister
CvChainCodes_swigregister(CvChainCodes)

__doc__ = """
cvBlob is a computer vision library designed to detect connected
regions in binary digital images. cvBlob performs connected
component analysis (also known as labeling) and features extraction.

This wrapper was automatically created from the C/C++ headers
using SWIG, and therefore contains little Python documentation.
All identifiers are identical or similar to their C/C++
counterparts, so please refer to the cvBlob C/C++
documentation for details."""




